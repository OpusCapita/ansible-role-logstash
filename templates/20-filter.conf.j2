filter {
    # copy swarm service name to tag field
    if [container][labels][com_docker_swarm_service_name] {
        mutate {
            copy => { "[container][labels][com_docker_swarm_service_name]" => "tag" }
        }
    }

    # Remove unused fields
    # container.labels.org_label-* and container.labels.com_docker_swarm_*
    if [container][labels] {
        ruby {
            code => "
                hash = event.get('[container][labels]')
                hash.keys.each do |field|
                  # logger.info('field is:', field)
                  if field.start_with?('org_label-','com_docker_swarm_')
                    # must build full path to field
                    event.remove('[container][labels][' + field + ']')
                  end
                end
            "
        }
    }

    # parse json message when possible
    # but skip TNT events
    if [message] =~ "\A\{.+\}\z" {
        json {
            # put result into the json field
            skip_on_invalid_json => true
            source => "message"
            target => "json"

            ###
            # TODO:
            # add support for [] in json messages
            # https://github.com/elastic/logstash/issues/11608
            ###

        }
        if "_jsonparsefailure" not in [tags] and ! [json][message][event][transactionId] {
            mutate {
                remove_field => ["message"]
            }
            if [json][userId] {
                mutate {
                    add_field => {"userId" => "%{[json][userId]}"}
                    remove_field => ["[json][userId]"]
                }
            }
            if [json][correlationId] {
                mutate {
                    add_field => {"correlationId" => "%{[json][correlationId]}"}
                    remove_field => ["[json][correlationId]"]
                }
            }
            if [json][method] {
                mutate {
                    add_field => {"[request][method]" => "%{[json][method]}"}
                    remove_field => ["[json][method]"]
                }
            }
            if [json][requestUri] {
                mutate {
                    add_field => {"[request][uri]" => "%{[json][requestUri]}"}
                    remove_field => ["[json][requestUri]"]
                }
            }
            if [json][serviceName] and [json][serviceName] != [tag] {
                mutate {
                    add_field => {"serviceName" => "%{[json][serviceName]}"}
                    remove_field => ["[json][serviceName]"]
                }
            }
            if [json][serviceInstanceId] {
                mutate {
                    add_field => {"serviceInstanceId" => "%{[json][serviceInstanceId]}"}
                    remove_field => ["[json][serviceInstanceId]"]
                }
            }
            if [json][message] {
                mutate {
                    add_field => {"message" => "%{[json][message]}"}
                    remove_field => ["[json][message]"]
                }
            }
            mutate {
                add_field => {"dataType" => "json"}
                rename => { "requestdata" => "request" }
                remove_field => ["json"]
            }
            if [tag] and "_jsonparsefailure" not in [tags] {
                # put result into the field named after a service name
                mutate {
                    rename => { "json" => "%{[tag]}" }
                }
            } else if [container][name] and "_jsonparsefailure" not in [tags] {
                # put result into the field named after a container name
                mutate {
                    rename => { "json" => "%{[container][name]}" }
                }
            }
        }
    }
}